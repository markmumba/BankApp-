// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (user_id, username, password_hash, email, full_name)
VALUES
  ($1, $2, $3, $4, $5) RETURNING user_id, username, password_hash, email, full_name, date_joined
`

type CreateUserParams struct {
	UserID       uuid.UUID
	Username     string
	PasswordHash string
	Email        string
	FullName     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.DateJoined,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT
  user_id, username, password_hash, email, full_name, date_joined
FROM
  users
WHERE
  user_id = $1
`

func (q *Queries) FindUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.DateJoined,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT
user_id, username, password_hash, email, full_name, date_joined
FROM
  users
WHERE
  email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.DateJoined,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT
  user_id, username, password_hash, email, full_name, date_joined
FROM
  users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.FullName,
			&i.DateJoined,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE
  users
SET
  username = $1,
  password_hash = $2,
  email = $3,
  full_name = $4
WHERE
  user_id = $5 RETURNING user_id, username, password_hash, email, full_name, date_joined
`

type UpdateUserParams struct {
	Username     string
	PasswordHash string
	Email        string
	FullName     string
	UserID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.FullName,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.DateJoined,
	)
	return i, err
}
